<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前后端通信加密</title>
      <link href="/2025/03/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E4%BF%A1%E5%8A%A0%E5%AF%86/"/>
      <url>/2025/03/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E4%BF%A1%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>前景：给某银行做小程序，要求安全合规，通信必须双向加密，且密钥需要定期更新，防止泄漏，把加密的过程记录一下。</p><span id="more"></span><p>前后端主流加解密方式是采用对称加密 + 非对称加密结合的方式，在保证数据传递速度的前提下，达到安全的目的。流程如下图<br><img src="/../images/sm.png" alt="加解密步骤"><br>目前只关注前端部分</p><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入依赖</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">JsEncrypt</span> <span class="keyword">from</span> <span class="string">&#x27;jsencrypt&#x27;</span> <span class="comment">// 用于 RSA 加密</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span> <span class="comment">// 用于 AES 加密</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">RSA</span> <span class="keyword">from</span> <span class="string">&#x27;jsrsasign&#x27;</span> <span class="comment">// 用于 生成 RSA 密钥对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端提供的 RSA 公钥。模拟生成</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rsaKey = <span class="title function_">generateRSAKeyPair</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 AES 加密数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encryptWithAES</span>(<span class="params">aesKey, data</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keyHex = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(aesKey)</span><br><span class="line">  <span class="keyword">const</span> iv = <span class="title function_">generateRandomIV</span>() <span class="comment">// 生成随机IV</span></span><br><span class="line">  <span class="keyword">const</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, keyHex, &#123;</span><br><span class="line">    iv,</span><br><span class="line">    <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">encryptedData</span>: encrypted.<span class="title function_">toString</span>(),</span><br><span class="line">    <span class="attr">iv</span>: <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">stringify</span>(iv),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 RSA 加密 AES 密钥</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encryptAESKeyWithRSA</span>(<span class="params">publicKey, aesKey</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> jsEncrypt = <span class="keyword">new</span> <span class="title class_">JsEncrypt</span>()</span><br><span class="line">  jsEncrypt.<span class="title function_">setPublicKey</span>(publicKey)</span><br><span class="line">  <span class="keyword">const</span> encryptedAESKey = jsEncrypt.<span class="title function_">encrypt</span>(aesKey)</span><br><span class="line">  <span class="keyword">if</span> (!encryptedAESKey) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;RSA 加密失败&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> encryptedAESKey <span class="comment">// 返回 Base64 编码的 RSA 加密结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES解密</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">data, key, iv</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> keyHex = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key)</span><br><span class="line">  <span class="keyword">const</span> ivHex = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">parse</span>(iv)</span><br><span class="line">  <span class="keyword">const</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(data, keyHex, &#123;</span><br><span class="line">    <span class="attr">iv</span>: ivHex,</span><br><span class="line">    <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主加密函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">encryptData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="comment">// 生成 AES 密钥</span></span><br><span class="line">  <span class="keyword">const</span> aesKey = <span class="title function_">getAesKey</span>()</span><br><span class="line">  <span class="keyword">const</span> encryptedDataObj = <span class="title function_">encryptWithAES</span>(aesKey, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)) <span class="comment">// AES加密请求数据</span></span><br><span class="line">  <span class="keyword">const</span> encryptedAesKey = <span class="title function_">encryptAESKeyWithRSA</span>(rsaKey.<span class="property">publicKey</span>, aesKey) <span class="comment">// RSA加密AES密钥</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回加密后的结果</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    encryptedAesKey, <span class="comment">// RSA 加密的 AES 密钥</span></span><br><span class="line">    <span class="attr">encryptedData</span>: encryptedDataObj.<span class="property">encryptedData</span>, <span class="comment">// AES 加密的数据</span></span><br><span class="line">    <span class="attr">iv</span>: encryptedDataObj.<span class="property">iv</span>, <span class="comment">// 矢量</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成AES随机密钥</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAesKey</span>(<span class="params">n = <span class="number">16</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * chars.<span class="property">length</span>)</span><br><span class="line">    res += chars[id]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密前的AES密钥&#x27;</span>, res)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成随机IV</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateRandomIV</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> iv = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">16</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">    iv[i] = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="property">lib</span>.<span class="property">WordArray</span>.<span class="title function_">create</span>(iv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成RSA密钥对</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateRSAKeyPair</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 生成密钥对</span></span><br><span class="line">  <span class="keyword">const</span> keyPair = <span class="variable constant_">RSA</span>.<span class="property">KEYUTIL</span>.<span class="title function_">generateKeypair</span>(<span class="string">&#x27;RSA&#x27;</span>, <span class="number">1024</span>) <span class="comment">// 1024 或 2048 位密钥长度</span></span><br><span class="line">  <span class="keyword">const</span> publicKey = <span class="variable constant_">RSA</span>.<span class="property">KEYUTIL</span>.<span class="title function_">getPEM</span>(keyPair.<span class="property">pubKeyObj</span>, <span class="string">&#x27;PKCS8PUB&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> privateKey = <span class="variable constant_">RSA</span>.<span class="property">KEYUTIL</span>.<span class="title function_">getPEM</span>(keyPair.<span class="property">prvKeyObj</span>, <span class="string">&#x27;PKCS8PRV&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;公钥&#x27;</span>, publicKey)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;私钥&#x27;</span>, privateKey)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 Base64 编码的公钥和私钥</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">publicKey</span>: publicKey.<span class="title function_">replace</span>(<span class="regexp">/(\r\n|\n|\r)/gm</span>, <span class="string">&#x27;&#x27;</span>), <span class="comment">// 去除换行符</span></span><br><span class="line">    <span class="attr">privateKey</span>: privateKey.<span class="title function_">replace</span>(<span class="regexp">/(\r\n|\n|\r)/gm</span>, <span class="string">&#x27;&#x27;</span>), <span class="comment">// 去除换行符</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RSA解密</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">decryptWithPrivateKey</span>(<span class="params">encryptedData, privateKey</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> jsEncrypt = <span class="keyword">new</span> <span class="title class_">JsEncrypt</span>()</span><br><span class="line">  jsEncrypt.<span class="title function_">setPrivateKey</span>(privateKey)</span><br><span class="line">  <span class="keyword">const</span> decryptedAESKey = jsEncrypt.<span class="title function_">decrypt</span>(encryptedData)</span><br><span class="line">  <span class="keyword">if</span> (!decryptedAESKey) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;RSA 解密失败&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> decryptedAESKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> encryptText = <span class="title function_">encryptData</span>(text);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加密前的数据&quot;</span>, text);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加密后的数据&quot;</span>, encryptText);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// RSA解密，获取AES密钥</span></span><br><span class="line"><span class="keyword">const</span> decryptAESText = <span class="title function_">decryptWithPrivateKey</span>(</span><br><span class="line">  encryptText.<span class="property">encryptedAesKey</span>,</span><br><span class="line">  rsaKey.<span class="property">privateKey</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;解密后的AES数据&quot;</span>, decryptAESText);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解密后的AES密钥解密数据，获取到明文</span></span><br><span class="line"><span class="keyword">const</span> decryptText = <span class="title function_">decrypt</span>(</span><br><span class="line">  encryptText.<span class="property">encryptedData</span>,</span><br><span class="line">  decryptAESText,</span><br><span class="line">  encryptText.<span class="property">iv</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;解密后的数据&quot;</span>, decryptText);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>后端可以设置一个有效期，如果发现私钥超时，返回一个错误码，并重新生成新的公私钥，前端重新调接口获取新的公钥后，再重新进行加解密操作。</p>]]></content>
      
      
      <categories>
          
          <category> 业务场景 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何把前端项目部署到自己的云服务器上？</title>
      <link href="/2025/03/06/%E9%9A%8F%E8%AE%B0-%E5%A6%82%E4%BD%95%E6%8A%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%9F/"/>
      <url>/2025/03/06/%E9%9A%8F%E8%AE%B0-%E5%A6%82%E4%BD%95%E6%8A%8A%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>当我有自己的云服务器后，如何把自己的前端项目部署到云服务器上呢？方便直接在公网上访问<br>以下是部署前端代码到阿里云服务器的步骤： </p><span id="more"></span> <ol><li><p>通过Xshell连接到服务器，输入主机名、端口号、用户名、密码</p></li><li><p>安装web服务器(一般是nginx)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Ubuntu/Debian</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install nginx</span><br></pre></td></tr></table></figure></li><li><p>前端把项目打包成静态文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p>把打包后的静态文件上传到服务器<br>一般是把静态文件放到&#x2F;var&#x2F;www&#x2F;html里，如果你想放多个项目，建议每个项目创建一个文件夹，比如&#x2F;var&#x2F;www&#x2F;html&#x2F;project1，&#x2F;var&#x2F;www&#x2F;html&#x2F;project2</p></li><li><p>配置nginx，让nginx指向打包后的静态文件<br>找到nignx的配置文件，一般是&#x2F;etc&#x2F;nginx&#x2F;nginx.conf，修改server块的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        # 直接使用IP地址作为server_name</span><br><span class="line">        server_name ip地址或域名; </span><br><span class="line"></span><br><span class="line">        # 静态文件路径配置（假设代码在/var/www/html目录）</span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></li><li><p>访问服务器的IP地址，即可访问到前端项目</p></li></ol><h4 id="如果我想在云服务器上部署多个前端项目呢，比如demo1，demo2。"><a href="#如果我想在云服务器上部署多个前端项目呢，比如demo1，demo2。" class="headerlink" title="如果我想在云服务器上部署多个前端项目呢，比如demo1，demo2。"></a>如果我想在云服务器上部署多个前端项目呢，比如demo1，demo2。</h4><ol><li>把demo1和demo2的代码打包成静态文件</li><li>把打包后的静态文件上传到服务器，比如&#x2F;var&#x2F;www&#x2F;html&#x2F;demo1，&#x2F;var&#x2F;www&#x2F;html&#x2F;demo2</li><li>配置nginx<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   ...</span><br><span class="line">    server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 47.98.56.114;</span><br><span class="line"></span><br><span class="line">    # 项目1配置</span><br><span class="line">    location /demo1 &#123;</span><br><span class="line">        alias /var/www/html/demo1;</span><br><span class="line">        index index.html;</span><br><span class="line">        try_files $uri $uri/ /demo1/index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 项目2配置</span><br><span class="line">    location /demo2 &#123;</span><br><span class="line">        alias /var/www/html/demo2;</span><br><span class="line">        index index.html;</span><br><span class="line">        try_files $uri $uri/ /demo2/index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重启nginx</li><li>访问对应的路径，即可访问到对应的项目<br>ip地址&#x2F;demo1<br>ip地址&#x2F;demo2</li></ol><p><code>注意：如果访问时，无法打开页面，可能是云服务器没有配置规则</code></p><ol><li>登录阿里云ECS控制台</li><li>找到您的实例 -&gt; 安全组 -&gt; 管理规则 -&gt; 快速添加</li><li>将端口范围是HTTP(80)和HTTPS(443)的规则添加到安全组中</li></ol>]]></content>
      
      
      <categories>
          
          <category> 随笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>双token机制用于实现单点登录（SSO）</title>
      <link href="/2025/03/06/%E5%8F%8Ctoken%E6%9C%BA%E5%88%B6%E7%94%A8%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/"/>
      <url>/2025/03/06/%E5%8F%8Ctoken%E6%9C%BA%E5%88%B6%E7%94%A8%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%EF%BC%88SSO%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>双token机制可以用于实现单点登录（SSO），其中一个token(refresh token)是用户的身份验证信息，例如用户名和密码，另一个token(access token)则是由认证服务器生成的用于会话管理和授权的令牌。以下是使用双token机制实现SSO的基本流程：</p><span id="more"></span><ol><li>用户尝试访问某个需要身份验证的应用程序</li><li>应用程序重定向到认证服务器，并要求用户提供其身份验证凭据(如用户名和密码)</li><li>认证服务器使用用户提供的凭据进行身份验证，通过后会颁发访问令牌(access)和刷新(refresh)令牌，并将其返回给单点登录服务。</li><li>应用程序将access token保存在cookie或浏览器存储中，并使用该令牌来完成后续对服务端资源的请求</li><li>如果access token过期或失效，应用程序可以使用refresh token来获取新的access token而无需再次提示用户进行身份验证。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 业务场景 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端实现大文件上传</title>
      <link href="/2025/03/06/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2025/03/06/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>记录一下如何对大文件进行上传，内容包括文件切片、断点续传、暂停上传、进度展示等功能<br>我这里使用React+Node来模拟实现</p><span id="more"></span><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="文件切片"><a href="#文件切片" class="headerlink" title="文件切片"></a>文件切片</h4><p>文件切片主要是用slice方法实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//控制切片大小</span><br><span class="line">const chunkSize = 10 * 1024; //10M</span><br><span class="line">//文件切片汇总</span><br><span class="line">function createFileChunk(file, size = chunkSize) &#123;</span><br><span class="line">    const fileChunkList = [];</span><br><span class="line">    let curSize = 0</span><br><span class="line">    //当curCount小于文件的尺寸时，继续切片</span><br><span class="line">    while (curSize &lt; file.size) &#123;</span><br><span class="line">        //将文件切片</span><br><span class="line">        fileChunkList.push(&#123;</span><br><span class="line">            file: file.slice(curSize, curSize + size)  //file的slice允许将一个文件按照大小切成多个片</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        curSize += size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return fileChunkList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取文件Hash值"><a href="#获取文件Hash值" class="headerlink" title="获取文件Hash值"></a>获取文件Hash值</h4><p>为什么要获取Hash值？<br>因为hash是根据文件内容来生成的，就算你改了文件名称，hash也是一样，不会存在重复上传的问题，计算hash用spark-md5来获取。<br>文件太大，计算Hash是个非常耗时的任务，为了避免页面卡顿阻塞，我们可以用web-worker开启多线程去计算<br>hash及spark-md5文件放在工程的public文件下，具体代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/* eslint-disable no-restricted-globals */</span><br><span class="line">/**</span><br><span class="line"> * 在 worker 中也是不允许访问 dom 的；</span><br><span class="line"> * 但它提供了importScripts函数用于导入外部脚本，通过它导入spark-md5；</span><br><span class="line"> * Worker中没有window，Worker中self指向顶层对象。</span><br><span class="line"> */</span><br><span class="line">// eslint-disable-next-line no-restricted-globals</span><br><span class="line">self.importScripts(&#x27;./spark-md5.min.js&#x27;)</span><br><span class="line">//self是web-worker的顶层对象</span><br><span class="line">self.onmessage = e =&gt; &#123;</span><br><span class="line">    const &#123; fileChunkList &#125; = e.data</span><br><span class="line">    const spark = new self.SparkMD5.ArrayBuffer()</span><br><span class="line">    let percentage = 0</span><br><span class="line">    let count = 0</span><br><span class="line">    const loadNext = index =&gt; &#123;</span><br><span class="line">        const reader = new FileReader()</span><br><span class="line">        reader.readAsArrayBuffer(fileChunkList[index].file)</span><br><span class="line">        reader.onload = e =&gt; &#123;</span><br><span class="line">            count++</span><br><span class="line">            spark.append(e.target.result)</span><br><span class="line">            if (count === fileChunkList.length) &#123;</span><br><span class="line">                self.postMessage(&#123;</span><br><span class="line">                    percentage: 100,</span><br><span class="line">                    hash: spark.end()</span><br><span class="line">                &#125;)</span><br><span class="line">                self.close()</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                percentage += 100 / fileChunkList.length</span><br><span class="line">                self.postMessage(&#123;</span><br><span class="line">                    percentage</span><br><span class="line">                &#125;)</span><br><span class="line">                loadNext(count)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    loadNext(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">主线程获取hash，使用promise来获取</span><br><span class="line"> const getFileHash = (fileChunkList) =&gt; &#123;</span><br><span class="line">        return new Promise((rel, rej) =&gt; &#123;</span><br><span class="line">            let woker = new Worker(&#x27;/hash.js&#x27;)</span><br><span class="line">            woker.postMessage(&#123; fileChunkList &#125;)</span><br><span class="line">            woker.onmessage = (e) =&gt; &#123;</span><br><span class="line">                const &#123; hash &#125; = e.data</span><br><span class="line">                if (hash) &#123;</span><br><span class="line">                    rel(hash)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//获取</span><br><span class="line">const fileHash = await getFileHash(fileChunkList)</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ol><li>文件上传前，需要先验证服务端是否存在已经上传的切片或者已经上传的整个文件，如果存在，则只上传未上传的部分。实现文件秒传功能<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> // 验证该文件是否已上传</span><br><span class="line">const data = await largeFileVerify(file.name, fileHash)</span><br><span class="line">// 如果该文件已经上传</span><br><span class="line">if (!data.shouldUpload) &#123;</span><br><span class="line">    message.success(&#x27;该文件已上传&#x27;)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line">const requestList = []; //要上传的切片列表</span><br><span class="line">fileChunkList.forEach((item, idx) =&gt; &#123;</span><br><span class="line">    const params = new FormData()</span><br><span class="line">    //二进制的片文件</span><br><span class="line">    params.append(&#x27;chunk&#x27;, item.file)</span><br><span class="line">    //hash码，标识每一个文件</span><br><span class="line">    params.append(&#x27;hash&#x27;, fileHash + &#x27;-hashIdx=&#x27; + idx)</span><br><span class="line">    //上传的文件的名称</span><br><span class="line">    params.append(&#x27;filename&#x27;, file.name)</span><br><span class="line">    //上传文件的hash值</span><br><span class="line">    params.append(&#x27;fileHash&#x27;, fileHash)</span><br><span class="line">    //文件一共有多少片</span><br><span class="line">    params.append(&#x27;chunkNumber&#x27;, fileChunkList.length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //过滤掉已经上传的切片</span><br><span class="line">    if (!data.uploadedList.includes(params.get(&#x27;hash&#x27;))) &#123;</span><br><span class="line">        requestList.push(params)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //开始上传</span><br><span class="line">     Promise.all(requestList.map(item =&gt; largeFileUpload(item))).then(data =&gt; &#123;</span><br><span class="line">            //所有切片上传完成后，进行切片合并</span><br><span class="line">            fileMerage(file.name,fileHash)</span><br><span class="line">        &#125;)</span><br><span class="line">        return</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="进度展示"><a href="#进度展示" class="headerlink" title="进度展示"></a>进度展示</h4><p>进度计算我是用(已经上传成功的切片&#x2F;总的切片数量)*100来计算，具体代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//上传成功的切片数量</span><br><span class="line">const uploadedCount = useRef(0)</span><br><span class="line">//上传的进度</span><br><span class="line">const [progress, setprogress] = useState(0)</span><br><span class="line"></span><br><span class="line">// 如果该文件已经上传,直接将进度拉到100</span><br><span class="line">if (!data.shouldUpload) &#123;</span><br><span class="line">    message.success(&#x27;该文件已上传&#x27;)</span><br><span class="line">    uploadedCount.current = 100</span><br><span class="line">    setprogress(100)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果存在部分已上传的切片</span><br><span class="line">//已经上传的数量</span><br><span class="line">uploadedCount.current = data.uploadedList.length  //uploadedList就是后端返回的已上传切片列表</span><br><span class="line">let totProgress = ((uploadedCount.current / fileChunkList.length) * 100).toFixed(2)</span><br><span class="line">setprogress(totProgress)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//文件上传函数中</span><br><span class="line"> Promise.all(requestList.map(item =&gt; largeFileUpload(item).then(res =&gt; &#123;</span><br><span class="line">        //文件上传一个就自增1</span><br><span class="line">        uploadedCount.current += 1</span><br><span class="line">        //这里进度大于99的话，先展示99，等文件合并完成，再展示100</span><br><span class="line">        let totProgress = ((uploadedCount.current / fileChunkList.length) * 100).toFixed(2)</span><br><span class="line">        if (totProgress &gt;= 99) &#123;</span><br><span class="line">            totProgress = 99.9</span><br><span class="line">        &#125;</span><br><span class="line">        setprogress(totProgress)</span><br><span class="line">        return res</span><br><span class="line">    &#125;))).then(data =&gt; &#123;</span><br><span class="line">        fileMerage(file.name,fileHash)</span><br><span class="line">    &#125;)</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line">//文件合并函数</span><br><span class="line">const fileMerage = async (filename,fileHash) =&gt; &#123;</span><br><span class="line">    const &#123; code &#125; = await largeFileMerage(filename,fileHash)</span><br><span class="line">    if (code === 0) &#123;</span><br><span class="line">        //当合并成功</span><br><span class="line">        setprogress(100)</span><br><span class="line">        message.success(&#x27;文件上传成功&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 模板代码 --&gt;</span><br><span class="line">&lt;Progress strokeColor=&#123;&#123; &#x27;0%&#x27;: &#x27;#108ee9&#x27;, &#x27;100%&#x27;: &#x27;#87d068&#x27;, &#125;&#125; percent=&#123;progress&#125; size=&quot;small&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="上传暂停"><a href="#上传暂停" class="headerlink" title="上传暂停"></a>上传暂停</h4><p>上传暂停功能我是用的axios的取消上传功能（<a href="https://www.axios-http.cn/docs/cancellation">AbortController</a>）搭配redux来实现。</p><ol><li>redux相关代码片段<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createSlice &#125; from &#x27;@reduxjs/toolkit&#x27;</span><br><span class="line"></span><br><span class="line">const initialState = &#123;</span><br><span class="line">    //所有请求的controller</span><br><span class="line">    fileAbortArr: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const uploadFileSlice = createSlice(&#123;</span><br><span class="line">    name: &#x27;uploadFile&#x27;,</span><br><span class="line">    initialState,</span><br><span class="line">    //定义reducers，并生成关联的操作</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        // action 里面有 type 和 payload 两个属性，所有的传参都在payload里面</span><br><span class="line">        pushArr: (state, &#123; payload &#125;) =&gt; &#123;</span><br><span class="line">            state.fileAbortArr.push(&#123;</span><br><span class="line">                controller: payload.controller,</span><br><span class="line">                type: payload.type</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //清空</span><br><span class="line">        clearAbort: (state) =&gt; &#123;</span><br><span class="line">            state.fileAbortArr = []</span><br><span class="line">        &#125;,</span><br><span class="line">        //移除</span><br><span class="line">        filterArr: (state, &#123; payload &#125;) =&gt; &#123;</span><br><span class="line">            state.fileAbortArr = state.fileAbortArr.filter(d =&gt; d.type !== payload.type)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//导出方法</span><br><span class="line">export const &#123; pushArr, clearAbort,filterArr &#125; = uploadFileSlice.actions;</span><br><span class="line"></span><br><span class="line">//默认导出</span><br><span class="line">export default uploadFileSlice.reducer</span><br></pre></td></tr></table></figure></li><li>组件内<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; filterArr, clearAbort &#125; from &#x27;../../redux/features/uploadFileSlice&#x27;;</span><br><span class="line">import &#123; useSelector, useDispatch &#125; from &#x27;react-redux&#x27;</span><br><span class="line">const dispatch = useDispatch()</span><br><span class="line">const &#123; fileAbortArr &#125; = useSelector((store) =&gt; store.uploadFile)</span><br><span class="line"></span><br><span class="line">// 当用户点击暂停按钮后</span><br><span class="line">//暂停上传</span><br><span class="line">const filePause = () =&gt; &#123;</span><br><span class="line">    //取消所有还未上传的请求</span><br><span class="line">    fileAbortArr.forEach(d =&gt; &#123;</span><br><span class="line">        d.controller.abort()</span><br><span class="line">    &#125;)</span><br><span class="line">    //清空数组</span><br><span class="line">    dispatch(clearAbort())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>请求接口中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; pushArr &#125; from &quot;../redux/features/uploadFileSlice&quot;;</span><br><span class="line">// 大文件上传接口中，向数组push请求</span><br><span class="line">function largeFileUpload(params) &#123;</span><br><span class="line">    const controller = new AbortController();</span><br><span class="line">    store.dispatch(pushArr(&#123; controller, type: params.get(&#x27;hash&#x27;) &#125;))</span><br><span class="line">    return instance.post(&#x27;/largeFile/upload&#x27;, params, &#123;</span><br><span class="line">        headers: &#123; &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27; &#125;,</span><br><span class="line">        signal: controller.signal</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>至此，整个文件上传流程就结束了!</li></ol><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>服务端处理文件和切片使用multiparty模块</p><blockquote><p>npm i multiparty –save</p></blockquote><p>文件和切片保存的路径如图<br><img src="/../images/1.png" alt="文件保存路径"><br>具体代码如下</p><h4 id="文件上传接口"><a href="#文件上传接口" class="headerlink" title="文件上传接口"></a>文件上传接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//处理大文件切片必要模块</span><br><span class="line">const multiparty = require(&#x27;multiparty&#x27;)</span><br><span class="line">const EventEmitter = require(&#x27;events&#x27;);</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">const STATIC_TEMPORARY = path.resolve(__dirname, &#x27;../../public/largeFile/chunkFile&#x27;); //文件切片保存位置</span><br><span class="line">const STATIC_FILES = path.resolve(__dirname, &#x27;../../public/largeFile/mergeFile&#x27;) //文件保存地址</span><br><span class="line"></span><br><span class="line">// 提取文件后缀名</span><br><span class="line">const extractExt = filename =&gt; &#123;</span><br><span class="line">    return filename.slice(filename.lastIndexOf(&#x27;.&#x27;), filename.length)</span><br><span class="line">&#125;</span><br><span class="line">//大文件切片上传接口</span><br><span class="line">router.post(&#x27;/largeFile/upload&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    const form = new multiparty.Form()</span><br><span class="line">    const myEmitter = new EventEmitter()</span><br><span class="line">    const formData = &#123;</span><br><span class="line">        filename: undefined,</span><br><span class="line">        hash: undefined,</span><br><span class="line">        chunk: undefined,</span><br><span class="line">        fileHash: undefined</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let isFieldOk = false,</span><br><span class="line">        isFileOk = false;</span><br><span class="line"></span><br><span class="line">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.error(&#x27;文件上传失败：&#x27;, err);</span><br><span class="line">            res.status(500).json(&#123; error: &#x27;文件上传失败&#x27; &#125;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        formData.filename = fields[&#x27;filename&#x27;][0];</span><br><span class="line">        formData.hash = fields[&#x27;hash&#x27;][0];</span><br><span class="line">        formData.fileHash = fields[&#x27;fileHash&#x27;][0];</span><br><span class="line"></span><br><span class="line">        isFieldOk = true;</span><br><span class="line">        myEmitter.emit(&#x27;start&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //当有文件上传时，该事件会被触发，并执行回调函数</span><br><span class="line">    form.on(&#x27;file&#x27;, function(name, file) &#123;</span><br><span class="line">        formData.chunk = file;</span><br><span class="line">        isFileOk = true;</span><br><span class="line">        myEmitter.emit(&#x27;start&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    myEmitter.on(&#x27;start&#x27;, () =&gt; &#123;</span><br><span class="line">        if (isFieldOk &amp;&amp; isFileOk) &#123;</span><br><span class="line">            console.log(&#x27;开始切片&#x27;, formData)</span><br><span class="line">            const &#123; filename, hash, chunk, fileHash &#125; = formData</span><br><span class="line">            const dir = `$&#123;STATIC_TEMPORARY&#125;/$&#123;fileHash&#125;$&#123;extractExt(filename)&#125;`</span><br><span class="line">            try &#123;</span><br><span class="line">                //检查目标目录是否存在，如果不存在则创建目录</span><br><span class="line">                if (!fs.existsSync(dir)) fs.mkdirSync(dir);</span><br><span class="line"></span><br><span class="line">                //读取切片文件的内容，将切片文件的内容写入到目标目录下的文件中</span><br><span class="line">                const buffer = fs.readFileSync(chunk.path);</span><br><span class="line">                const ws = fs.createWriteStream(`$&#123;dir&#125;/$&#123;hash&#125;`);</span><br><span class="line">                ws.write(buffer);</span><br><span class="line">                ws.close();</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: 0,</span><br><span class="line">                    msg: `$&#123;hash&#125; 切片上传成功`</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                console.error(error);</span><br><span class="line">            &#125;</span><br><span class="line">            isFieldOk = false;</span><br><span class="line">            isFileOk = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><h4 id="文件合并接口"><a href="#文件合并接口" class="headerlink" title="文件合并接口"></a>文件合并接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">const &#123; Buffer &#125; = require(&#x27;buffer&#x27;)</span><br><span class="line">router.get(&#x27;/largeFile/merage&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    const &#123; filename,fileHash &#125; = req.query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //文件hash名称</span><br><span class="line">    const fileHashPath = `$&#123;STATIC_TEMPORARY&#125;/$&#123;fileHash&#125;$&#123;extractExt(filename)&#125;`</span><br><span class="line">    try &#123;</span><br><span class="line">        let len = 0;</span><br><span class="line">        //先排序 不然会将索引10的分块排在第3位</span><br><span class="line">        const sortList = fs.readdirSync(fileHashPath).sort((a, b) =&gt; &#123;</span><br><span class="line">            //根据hashIdx来排序</span><br><span class="line">            return Number(a.split(&#x27;-hashIdx=&#x27;)[1]) - Number(b.split(&#x27;-hashIdx=&#x27;)[1])</span><br><span class="line">        &#125;)</span><br><span class="line">        const bufferList = sortList.map(hash =&gt; &#123;</span><br><span class="line">            const buffer = fs.readFileSync(`$&#123;fileHashPath&#125;/$&#123;hash&#125;`);</span><br><span class="line">            len += buffer.length;</span><br><span class="line">            return buffer;</span><br><span class="line">        &#125;);</span><br><span class="line">        const buffer = Buffer.concat(bufferList, len);</span><br><span class="line">        const ws = fs.createWriteStream(`$&#123;STATIC_FILES&#125;/$&#123;filename&#125;`);</span><br><span class="line">        ws.write(buffer);</span><br><span class="line">        ws.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //删除切片</span><br><span class="line">        deleteFolder(fileHashPath)</span><br><span class="line"></span><br><span class="line">        res.send(&#123;</span><br><span class="line">            code: 0,</span><br><span class="line">            msg: &#x27;切片合成完成&#x27;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        console.error(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//合成后，删除切片文件</span><br><span class="line">function deleteFolder(filepath) &#123;</span><br><span class="line">    if (fs.existsSync(filepath)) &#123;</span><br><span class="line">        fs.readdirSync(filepath).forEach(filename =&gt; &#123;</span><br><span class="line">            const fp = `$&#123;filepath&#125;/$&#123;filename&#125;`;</span><br><span class="line">            if (fs.statSync(fp).isDirectory()) deleteFolder(fp);</span><br><span class="line">            else fs.unlinkSync(fp);</span><br><span class="line">        &#125;);</span><br><span class="line">        fs.rmdirSync(filepath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件校验接口"><a href="#文件校验接口" class="headerlink" title="文件校验接口"></a>文件校验接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//校验文件是否已经上传</span><br><span class="line">router.post(&#x27;/largeFile/veirfy&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    const &#123; filename,fileHash &#125; = req.body</span><br><span class="line">    const filePath = `$&#123;STATIC_FILES&#125;/$&#123;filename&#125;`</span><br><span class="line">    console.log(filePath)</span><br><span class="line">    //如果已经存在该文件，直接返回</span><br><span class="line">    if (fs.existsSync(filePath)) &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            code: 0,</span><br><span class="line">            shouldUpload: false</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; else &#123; //如果不存在则计算已经上传了多少切片</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            code: 0,</span><br><span class="line">            shouldUpload: true,</span><br><span class="line">            //已上传的文件列表数组</span><br><span class="line">            uploadedList: fs.existsSync(`$&#123;STATIC_TEMPORARY&#125;/$&#123;fileHash&#125;$&#123;extractExt(filename)&#125;`) ? fs.readdirSync(`$&#123;STATIC_TEMPORARY&#125;/$&#123;fileHash&#125;$&#123;extractExt(filename)&#125;`) : []</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h3><p><img src="/../images/2.gif" alt="效果演示"><br>参考资源：</p><ol><li><a href="https://cloud.tencent.com/developer/article/1589057">https://cloud.tencent.com/developer/article/1589057</a></li><li><a href="https://blog.csdn.net/csdn_yudong/article/details/123720232">https://blog.csdn.net/csdn_yudong/article/details/123720232</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 业务场景 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2025/03/06/hello-world/"/>
      <url>/2025/03/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>先熟悉熟悉MD语法</p><span id="more"></span><ol><li>标题</li></ol><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>…<br>2. 段落格式和字体<br>换行在最后添加两个空格</p><p>我是第二行<br><em>斜体文本1</em><br><em>斜体文本2</em><br><strong>粗体文本1</strong><br><strong>粗体文本2</strong><br><em><strong>粗斜体文本1</strong></em><br><em><strong>粗斜体文本2</strong></em><br>3. 列表</p><ul><li>2021年<ul><li>3月<ul><li>事件1</li><li>事件2</li></ul></li><li>6月<ul><li>事件3</li><li>事件4</li></ul></li></ul></li></ul><ol start="4"><li>代码块<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;hello word&#x27;)</span><br></pre></td></tr></table></figure></li><li>超链接<br>这是一个链接 <a href="https://zhanglong1009.github.io/">我的blog</a></li><li>表格<table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></li><li>其他<br>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑<br><span style="color:#87CEEB">天蓝色</span><br><span style="color:#FF007F">玫瑰红</span><br><span style="color:#00FF7F">青绿色</span><br><span style="color:#8A2BE2">紫罗兰色</span><br><span style="color:#800000">酒红色</span><br><span style="color:#FFFFFF">雪白色</span><blockquote><p>区块</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vite性能优化</title>
      <link href="/2025/03/06/Vite%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2025/03/06/Vite%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="1-分包策略"><a href="#1-分包策略" class="headerlink" title="1.分包策略"></a>1.分包策略</h3><p>由于浏览器缓存策略，我们修改完业务代码后，每次打包后的文件名都会发生修改，浏览器都会重新请求这个js文件，造成性能浪费。</p><span id="more"></span><p><code>分包策略就是把一些不会经常更新的文件，进行单独打包处理。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">manualChunks</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//把包含有node_modules名字的文件都打到同一个包里</span></span><br><span class="line">          <span class="keyword">if</span> (id.<span class="title function_">includes</span>(<span class="string">&#x27;node_modules&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;vendor&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">   plugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-动态导入"><a href="#2-动态导入" class="headerlink" title="2.动态导入"></a>2.动态导入</h3><p>一般是用于vue或react里面的路由动态导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">       <span class="comment">//动态导入，只有访问到该路径，才加载这个文件</span></span><br><span class="line">       <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login.vue&#x27;</span>)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><h3 id="3-CDN加速-内容分发"><a href="#3-CDN加速-内容分发" class="headerlink" title="3.CDN加速(内容分发)"></a>3.CDN加速(内容分发)</h3><p>将我们的第三方依赖全部写成CDN的形式，保证我们自己代码小体积<br>依赖插件 <a href="https://www.npmjs.com/package/vite-plugin-cdn-import">vite-plugin-cdn-import</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> importToCDN <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-cdn-import&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">importToCDN</span>(&#123;</span><br><span class="line">            <span class="attr">modules</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;react&#x27;</span>, <span class="comment">//包的名字</span></span><br><span class="line">                    <span class="attr">var</span>: <span class="string">&#x27;React&#x27;</span>, <span class="comment">//包导出的变量名</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">`umd/react.production.min.js`</span>,  <span class="comment">//cdn地址</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;lodash&#x27;</span>,</span><br><span class="line">                    <span class="attr">var</span>: <span class="string">&#x27;_&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Gzip压缩"><a href="#4-Gzip压缩" class="headerlink" title="4.Gzip压缩"></a>4.Gzip压缩</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vite-plugin-compression -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> viteCompression <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-compression&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">viteCompression</span>()],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>文件不大的话不建议压缩，因为浏览器解压也需要一定时间</code></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Token无感刷新</title>
      <link href="/2025/03/06/Token%E6%97%A0%E6%84%9F%E5%88%B7%E6%96%B0/"/>
      <url>/2025/03/06/Token%E6%97%A0%E6%84%9F%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>基于axios的token无感刷新，用户登录接口会返回两个token，一个 access_token（30分钟有效期），一个 refresh_token（7天有效期）。访问接口需要在请求头带上 access_token，如果access_token过期，则需要使用refresh_token去重新获取access_token。实现用户无感刷新token效果。<code>双token一般用于单点登录(单点登录会在之后的文章中更新)</code></p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任务队列接口</span></span><br><span class="line">interface <span class="title class_">PendingTask</span> &#123;</span><br><span class="line">    <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span></span><br><span class="line">    <span class="attr">resolve</span>: <span class="title class_">Function</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> refreshing = <span class="literal">false</span>; <span class="comment">//加入标识，防止多个并发请求多次刷新token</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">queue</span>: <span class="title class_">PendingTask</span>[] = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">axiosInstance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">async</span> (error) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; data, config &#125; = error.<span class="property">response</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果token正在刷新中，将请求加入到队列里</span></span><br><span class="line">        <span class="keyword">if</span>(refreshing) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">                queue.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    config,</span><br><span class="line">                    resolve</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当返回状态码为401时(后台约定),则进行token刷新</span></span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">statusCode</span> === <span class="number">401</span> &amp;&amp; !config.<span class="property">url</span>.<span class="title function_">includes</span>(<span class="string">&#x27;/refresh&#x27;</span>)) &#123;</span><br><span class="line">            refreshing = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行token刷新接口</span></span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">refreshToken</span>();</span><br><span class="line"></span><br><span class="line">            refreshing = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(res.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// token刷新成功，则重新发送队列里的请求</span></span><br><span class="line">                queue.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;config, resolve&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="title function_">axiosInstance</span>(config))</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//清空队列，防止重复执行</span></span><br><span class="line">                queue = []</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">axiosInstance</span>(config);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;登录过期，请重新登录&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> error.<span class="property">response</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axiosInstance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取token，缓存在内存中</span></span><br><span class="line">    <span class="keyword">const</span> accessToken = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;access_token&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(accessToken) &#123;</span><br><span class="line">        <span class="comment">// 设置请求头</span></span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">authorization</span> = <span class="string">&#x27;Bearer &#x27;</span> + accessToken;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//刷新token接口</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">refreshToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axiosInstance.<span class="title function_">get</span>(<span class="string">&#x27;/refresh&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">          <span class="attr">token</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;refresh_token&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;access_token&#x27;</span>, res.<span class="property">data</span>.<span class="property">accessToken</span>);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;refresh_token&#x27;</span>, res.<span class="property">data</span>.<span class="property">refreshToken</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 业务场景 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
